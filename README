Jarvis is a simple voice command application written by Airen Surzyn as part of an application process.

Overview: Jarvis was conceived as a simple desktop client that translates simple voice commands into executable command line operations. The application moves between states which accept certain types of input and uses each state to form a coherent command which is translated into a Unix(no Windows implementation at the moment) command and run from terminal. The command itself as it is being constrcted is displayed on the GUI and a voice response is given to prompt the user towards further input.

Motivation: The idea for Jarvis came from the popular comic book, now movie, series 'Iron Man' which I recently saw for the first time. This application was written as a submission/sample code project as I believed it would demonstrate key development skills for a young programmer in my position, namely:
  - basic programming acumen
  - the ability to find/decipher/implement unfamiliar third-party API's
  - familiarity with OOP concepts(encapsulation, inheritance/polymorphism, abstraction)
  - design creativity(I was not able to implement everything I wanted to in the way that I had initially planned)

Third-party APIs/libraries
Outside of Java's standard libraries, in this project I make use of:
 - Sphinx4, created by Carnegie Mellon University
 - FreeTTS, created by Sun Microsystems Laboratories

User issues command -> Command is interpreted/vaildated -> Command is executed

How to use Jarvis:

The program goes between four states based on user input(raw audio) drawn roughly below:


State 0: Attention -> State 1: Action -> State 2: Object -> State 3: Confirmation


Each state corresponds to a limited “grammar” of potential words that move Jarvis into the next state or back to state 0 in the case of a “cancel” command or the completion of State 3. The design is very much like a Finite State Machine underpinned by the logical transitions indicated by user commands. Currently, Jarvis has been developed for use with Unix/Linux systems, but the Command classes are designed such that they are easily extendable to a Windows implementation.
State 0 - Attention:
- Recognizable words include [Jarvis, hey Jarvis, please]

State 1 - Action:
- Recognizable words include [open, close, cancel]

State 2 - Object:
- Recognizable words include [internet, command, eclipse, cancel]

State 3 - Confirmation:
- Recognizable words include [execute, cancel]

**Note - all words are contained in the corresponding .gram files



Improvements

By no means a polished product, there are a number of improvements I would like to make.

1. Improve command construction
- After sitting on this for a day or so, I think I can make the command construction procedure more flexible by using a SymbolTable, or effectively a String based directed graph
- E.g each node in the graph represents a word in the vocabulary, and maintains pointers to words in can link to for command formation. When a word is read in that does not match a connection of a node, Jarvis can return an exception or handle the error
- Can maybe use a String[] to keep track of all the tokens
- (Jarvis) -> (open) -> (internet)

2. Improve negative funcitonality
- Currently the negative functionality(when bad words are submitted) is pretty poor
- The way I understand Sphinx to work, rawInput is interpreted and confidence levels are assigned to potential words from the grammar file. The way I was thinking to improve this would be to not accept input below a certain confidence level. Unfortunately I haven't been able to find such a variable/method I can access yet. Could be found potentially by digging further into Documentation
